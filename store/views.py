from django.shortcuts import render, redirect
from django.contrib import messages
from .forms import ProductForm
from .models import Product
import google.generativeai as genai
import ast
import logging

# Setup logging
logger = logging.getLogger(__name__)

# API Key Configuration
GEMINI_API_KEY = 'AIzaSyC9EZicsv9_W5JVVgHisolse3bXIn5OPf4'
genai.configure(api_key=GEMINI_API_KEY)

def generate_tags(product_name, product_description):
    """
    Generate relevant tags for a product using Google's Gemini AI.
    
    Args:
        product_name (str): The name of the product
        product_description (str): The description of the product
        
    Returns:
        list: A list of tags generated by the AI
    """
    try:
        # Create a more structured prompt for better results
        prompt = f"""
        Generate relevant and concise tags for this grocery product.
        
        Product Name: {product_name}
        Product Description: {product_description}
        
        Please provide 3-5 key tags that describe:
        - Category (e.g., dairy, produce, snacks)
        - Attributes (e.g., organic, gluten-free, low-sodium)
        - Usage (e.g., breakfast, baking, quick meal)
        
        Format the tags as a simple comma-separated list without numbering or bullet points.
        """

        # Initialize the model
        model = genai.GenerativeModel("gemini-1.5-flash")
        
        # Generate content
        response = model.generate_content(prompt)
        logger.debug(f"Raw response text: {response.text}")  # Log raw response
        
        # Clean response text
        text = response.text.strip()
        logger.debug(f"Cleaned response text: {text}")  # Log cleaned text
        
        # Clean and split the tags based on commas
        tags = [tag.strip(' *-â€¢').capitalize() for tag in text.split(',') if tag.strip()]
        
        # Remove any empty tags and limit to 7 tags max
        tags = [tag for tag in tags if tag][:7]
        
        logger.debug(f"Final processed tags: {tags}")  # Log final tags
        return tags
        
    except Exception as e:
        logger.error(f"Error generating tags: {str(e)}")
        # Return some default tags if the AI fails
        return ["Grocery", "Food"]

def process_product_tags(products):
    """
    Process product tags from string representation to list.
    
    Args:
        products (QuerySet): The products to process
        
    Returns:
        QuerySet: The products with processed tags
    """
    for product in products:
        if product.tags and isinstance(product.tags, str):
            try:
                product.tags = ast.literal_eval(product.tags)
            except (ValueError, SyntaxError):
                product.tags = []
    return products

def product_list(request):
    """
    Display the list of products and recommendations.
    """
    # Get all products
    products = Product.objects.all()
    
    # Process tags
    products = process_product_tags(products)
    
    # Generate recommendations (placeholder for now)
    recommendations = []
    
    # If we have products, we could generate recommendations based on inventory patterns
    if products.exists():
        # Here you would implement your recommendation logic
        # For now, we'll leave it empty
        pass
    
    context = {
        'products': products,
        'recommendations': recommendations
    }
    
    return render(request, 'store/product_list.html', context)

def add_product(request):
    """
    Add a new product with AI-generated tags.
    """
    if request.method == 'POST':
        form = ProductForm(request.POST)
        if form.is_valid():
            # Get the cleaned data
            product_name = form.cleaned_data['name']
            product_description = form.cleaned_data['description']
            
            # Generate tags using AI
            tags = generate_tags(product_name, product_description)
            
            # Create but don't save the product yet
            product = form.save(commit=False)
            product.tags = tags
            product.save()
            
            # Show success message
            messages.success(request, f"Product '{product_name}' added successfully with smart tags!")
            
            # Redirect to product list
            return redirect('product_list')
    else:
        form = ProductForm()
    
    return render(request, 'store/add_product.html', {'form': form})

def about(request):
    """
    Display information about the TagSmart Grocery platform.
    """
    return render(request, 'store/about.html')